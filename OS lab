OPERATING SYSTEMS LAB
Week – 1
Simulate the following CPU scheduling algorithms:(a) FCFS   (b) SJF

1.a)  FCFS (First Come First Serve)

Program:

#include<stdio.h> 
 int main()
 
{
    int n,bt[20],wt[20],tat[20],avwt=0,avtat=0,i,j;
    printf("Enter total number of processes(maximum 20):");
    scanf("%d",&n);
 
    printf("nEnter Process Burst Timen");
    for(i=0;i<n;i++)
    {
        printf("P[%d]:",i+1);
        scanf("%d",&bt[i]);
    }
 
    wt[0]=0;   
 
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
    }
 
    printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time");
 
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];
        avwt+=wt[i];
        avtat+=tat[i];
        printf("\n%d\t\t%d\t\t%d\t\t%d",i+1,bt[i],wt[i],tat[i]);
    }
 
    avwt/=i;
    avtat/=i;
    printf("\nAverage Waiting Time:%d",avwt);
    printf("\nAverage Turnaround Time:%d\n",avtat);
 
    return 0;
}

Output:

 

1.b) SJF (Shortest Job First)
Program:
#include<stdio.h>
 int main()
{
    int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("Enter number of process:");
    scanf("%d",&n);
  
    printf("\nEnter Burst Time:n");
    for(i=0;i<n;i++)
    {
        printf("%d:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;         
    }
  
       for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
  
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
  
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
   
    wt[0]=0;            
  
   
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
            wt[i]+=bt[j];
  
        total+=wt[i];
    }
  
    avg_wt=(float)total/n;      
    total=0;
  
    printf("\nProcess\t    Burst Time    \tWaiting Time\tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];   
        total+=tat[i];
        printf("\n%d\t\t  %d\t\t    %d\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
  
    avg_tat=(float)total/n;    
    printf("\nAverage Waiting Time=%f",avg_wt);
    printf("\nAverage Turnaround Time=%f",avg_tat);
}

Output:
 
 
Week -- 2
Simulate the following CPU scheduling algorithms:(a) Priority (b) Round Robin
2.a) Priority
Program:
#include <stdio.h> 
void swap(int *a,int *b)
{
    int temp=*a;
    *a=*b;
    *b=temp;
}
int main()
{
    int n,i,j,t=0,m,a[20];
    printf("Enter Number of Processes: ");
    scanf("%d",&n);
     int b[n],p[n],index[n];
    for(i=0;i<n;i++)
    {
        printf("Enter Burst Time and Priority Value for Process %d: ",i+1);
        scanf("%d %d",&b[i],&p[i]);
        index[i]=i+1;
    }
    for(i=0;i<n;i++)
    {
        int a=p[i],m=i;        
        for(j=i;j<n;j++)
        {
            if(p[j] > a)
            {
                a=p[j];
                m=j;
            }
        }        
        swap(&p[i], &p[m]);
        swap(&b[i], &b[m]);
        swap(&index[i],&index[m]);
    }    
    printf("Order of process Execution is\n");
    for(i=0;i<n;i++)
    {
        printf("%d is executed from %d to %d\n",index[i],t,t+b[i]);
        t+=b[i];
    }
    printf("\nProcess Id\t priority\tBurst Time\tWait Time\tTurnAround Time\n");
    int wait_time=0;
    for(i=0;i<n;i++)
    {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n",index[i],p[i],b[i],wait_time,wait_time + b[i]);
        wait_time += b[i];
    }
    return 0;
}

Output:

 

2.b) Round Robin

Program:
#include<stdio.h> 
int main()
{
      int i, limit, total = 0, x, counter = 0, time_quantum;
      int wait_time = 0, turnaround_time = 0, arrival_time[10], burst_time[10], temp[10];
      float average_wait_time, average_turnaround_time;
      printf("\nEnter Total Number of Processes:");
      scanf("%d", &limit);
      x = limit;
      for(i = 0; i < limit; i++)
      {
            printf("\nEnter Details of Process[%d]\n", i + 1);
 
            printf("Arrival Time:");
 
            scanf("%d", &arrival_time[i]);
 
            printf("Burst Time:");
 
            scanf("%d", &burst_time[i]);
 
            temp[i] = burst_time[i];
      }
 
      printf("Enter Time Quantum:");
      scanf("%d", &time_quantum);
      printf("\nProcess ID\tBurst Time\tTurnaround Time\tWaiting Time");
      for(total = 0, i = 0; x != 0;)
      {
            if(temp[i] <= time_quantum && temp[i] > 0)
            {
                  total = total + temp[i];
                  temp[i] = 0;
                  counter = 1;
            }
            else if(temp[i] > 0)
            {
                  temp[i] = temp[i] - time_quantum;
                  total = total + time_quantum;
            }
            if(temp[i] == 0 && counter == 1)
            {
                  x--;
                  printf("\nP%d\t\t%d\t\t%d\t\t%d", i + 1, burst_time[i], total - arrival_time[i], total - arrival_time[i] - burst_time[i]);
                  wait_time = wait_time + total - arrival_time[i] - burst_time[i];
                  turnaround_time = turnaround_time + total - arrival_time[i];
                  counter = 0;
            }
            if(i == limit - 1)
            {
                  i = 0;
            }
            else if(arrival_time[i + 1] <= total)
            {
                  i++;
            }
            else
            {
                  i = 0;
            }
      }
 
      average_wait_time = wait_time * 1.0 / limit;
      average_turnaround_time = turnaround_time * 1.0 / limit;
      printf("\nAverage Waiting Time:%f", average_wait_time);
      printf("\nAvg Turnaround Time:%f", average_turnaround_time);
      return 0;
}

Output:

 

 
Week – 3
Multiprogramming-Memory management-Implementation of fork (), wait (), exec() and exit (), System calls

Program:
#include<unistd.h>
#include<stdio.h>
#include<stdlib.h>
#include<sys/wait.h>
int main()
{
pid_t p;
p=fork();
if(p==-1)
{
printf("Fork Error");
exit(0);
}
else if(p==0)
{
int i;
printf("Child PID is %d and PPID is %d\n",getpid(),getppid());
for(i=1;i<6;i++)
{
printf("Child i is %d\n",i);
}
_exit(0);
}
else
{
int i;
printf("Parent PID is %d and PPID is %d\n",getpid(),getppid());
pid_t p1=wait(0);
printf("PID=%d child ended",p1);
for(i=1;i<6;i++)
{
printf("Parent i is %d\n",i);
}
exit(0);
}
return 0;
}

Output:

 

 
Week – 4
Simulate the Multiprogramming with a fixed number of tasks (MFT)

Program:
#include<stdio.h>
#include<math.h>
void main()
  {
  int np,nb,mm,bs,i,j,ps[100],nba[100],ifm[100],sb=0,flag=0;
  float x;
  printf("Enter the Memory size:  ");
  scanf("%d",&mm);
  printf("Enter the no of Blocks:  ");
  scanf("%d",&nb);
  printf("Enter the no of processes:  ");
  scanf("%d",&np);
  bs=mm/nb;
 
 for(i=1;(i<=np)&&(sb<nb);i++)
    {
    printf("Enter the size of p[%d]:  ",i);
    scanf("%d",&ps[i]);
  
  if(ps[i]<=bs)
      nba[i]=1;
    
else
      {
      x=ps[i]/(float)bs;
      nba[i]=(ceil)(x);
      }

    ifm[i]=nba[i]*bs-ps[i];
    sb=sb+nba[i];
  
  if(sb>nb)
      {
      i=i-1;
      flag=1;
      }
    }

  j=i;
  printf("Process\tSize\tnba\tifm\n");
  
for(i=1;i<j;i++)
    printf("%d\t%d\t%d\t%d\n",i,ps[i],nba[i],ifm[i]);
 
 if(flag==1)
    printf("Memory space is unavailable");
  }
 Output:
 

 
Week – 5
Simulate the Multiprogramming with a variable number of tasks (MVT)

Program:
#include<stdio.h>
void main()
  {
  int mm,np,ps[100],rm[100],am=0,flag=0,i,j;
  printf("Enter the memory size");
  scanf("%d",&mm);
  printf("enter no of processes");
  scanf("%d",&np);
  for(i=0;(i<np)&&(am<mm);i++)
    {
    printf("Enter the size of p[%d]:",i+1);
    scanf("%d",&ps[i]);
    am=am+ps[i];
    if(am>=mm)
      {
      flag=1;
      break;
      }
    rm[i]=mm-am;
    }
  j=i;
  printf("Process\tsize\trm\n");
  for(i=0;i<j;i++)
    printf("%d\t%d\t%d\n",i+1,ps[i],rm[i]);
  if(flag==1)
    printf("memory is unavailable");
  }

Output:
 
 
Week – 6
Simulate Bankers Algorithm for Dead Lock Avoidance

Program:
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int Max[10][10], need[10][10], alloc[10][10], avail[10], completed[10], safeSequence[10];
    int p, r, i, j, process, count;
    count = 0;
 
    printf("Enter the no of processes : ");
    scanf("%d", &p);
 
    for(i = 0; i< p; i++)
        completed[i] = 0;
 
    printf("\nEnter the no of resources : ");
    scanf("%d", &r);
 
    printf("\nEnter the Max Matrix for each process\n : ");
    for(i = 0; i < p; i++)
    {
        printf("For process %d : ", i + 1);
        for(j = 0; j < r; j++)
            scanf("%d", &Max[i][j]);
    }
 
    printf("\nEnter the allocation for each process \n: ");
    for(i = 0; i < p; i++)
    {
        printf("For process %d : ",i + 1);
        for(j = 0; j < r; j++)
            scanf("%d", &alloc[i][j]);
    }
 
    printf("\nEnter the Available Resources : ");
    for(i = 0; i < r; i++)
        scanf("%d", &avail[i]);
 
    for(i = 0; i < p; i++)
 
        for(j = 0; j < r; j++)
            need[i][j] = Max[i][j] - alloc[i][j];
 
        do
        {
            printf("\n Max matrix:\tAllocation matrix:\n");
 
            for(i = 0; i < p; i++)
            {
                for( j = 0; j < r; j++)
                    printf("%d ", Max[i][j]);
                printf("\t\t");
                for( j = 0; j < r; j++)
                    printf("%d ", alloc[i][j]);
                printf("\n");
            }
 
            process = -1;
 
            for(i = 0; i < p; i++)
            {
                if(completed[i] == 0)//if not completed
                {
                    process = i ;
                    for(j = 0; j < r; j++)
                    {
                        if(avail[j] < need[i][j])
                        {
                            process = -1;
                            break;
                        }
                    }
                }
                if(process != -1)
                    break;
            }
 
            if(process != -1)
            {
                printf("\nProcess %d runs to completion!", process + 1);
                safeSequence[count] = process + 1;
                count++;
                for(j = 0; j < r; j++)
                {
                    avail[j] += alloc[process][j];
                    alloc[process][j] = 0;
                    Max[process][j] = 0;
                    completed[process] = 1;
                }
            }
        }
        while(count != p && process != -1);
 
        if(count == p)
        {
            printf("\nThe system is in a safe state!!\n");
            printf("Safe Sequence : < ");
            for( i = 0; i < p; i++)
                printf("%d ", safeSequence[i]);
            printf(">\n");
        }
        else
            printf("\nThe system is in an unsafe state!!");
 
}

Output:

 

 
Week – 7
Simulate the FIFO page replacement algorithm

Program:
#include<stdio.h>
#include<conio.h>
void main()
  {
  int a[5],b[50],p=0,q=0,m=0,h,k,i,q1=1,j,u,r;
  char f='F';
  printf("Enter the range: ");
  scanf("%d",&r);
  printf("Enter numbers:");
  for(i=0;i<r;i++)
    scanf("%d",&b[i]);
  printf("\nRefString          PageFrame\n");
  for(i=0;i<r;i++)
    {
    if(p==0)
      {
      if(q>=3)
        q=0;
      a[q]=b[i];
      q++;
      if(q1<3)
        {
        q1=q;
        }
      }
    printf("\n%d",b[i]);
    printf("\t");
    for(h=0;h<q1;h++)
      printf("\t%d",a[h]);
    if((p==0)&&(q1==3))
      {
      m++;
      }
    p=0;
    for(k=0;k<q-1;k++)
      {
      if(b[i+1]==a[k])
      p=1;
      }
    }
  printf("\nNo of faults:%d",m);
  }

Output:
 
 
Week – 8
Simulate the LRU page replacement algorithm
 
Program:

#include<stdio.h>
void main()
  {
  int g=0,r,a[5],b[20],p=0,q=0,m=0,h,k,i,q1=1,j,u;
  char f='F';
  printf("Enter the range: ");
  scanf("%d",&r);
  printf("Enter no: ");
  for(i=0;i<r;i++)
    scanf("%d",&b[i]);
  for(i=0;i<r;i++)
    {
    if(p==0)
      {
      if(q>=3)
      q=0;
      a[q]=b[i];
      q++;
      if(q1<3)
        {
        q1=q;
        g=1;
        }
      }
    printf("\n%d",b[i]);
    printf("\t");
    for(h=0;h<q1;h++)
      printf("%d\t",a[h]);
    if((p==0)&&(q1==3)&&(g!=1))
      {
      printf("-->%c",f);
      m++;
      }
    p=0;
    g=0;
    if(q1==3)
      {
      for(k=0;k<q-1;k++)
        {
        if(b[i+1]==a[k])
          p=1;
        }
      for(j=0;j<q1;j++)
        {
        u=0;
        k=i;
        while(k>(i-2)&&(k>=0))
          {
          if(b[k]==a[j])
            u++;
          k--;
          }
        if(u==0)
          q=j;
        }
      }
    else
      {
      for(k=0;k<q;k++)
        {
        if(b[i+1]==a[k])
          p=1;
        }
      }
    }
  printf("\nNo of faults:%d\n",m);
  }

Output:
 
 
Week – 9
Simulate the following File allocation strategies (a) Sequenced (b) Indexed (c) Linked

(a) Sequenced
Program:
#include<stdio.h>
void main()
{
 int n,i,j,b[20],sb[20],t[20],x,c[20][20];
printf("Enter no.of files:");
scanf("%d",&n);
for(i=0;i<n;i++)
 {
	printf("Enter no. of blocks occupied by file%d",i+1);
	scanf("%d",&b[i]);
	printf("Enter the starting block of file%d",i+1);
	scanf("%d",&sb[i]);
	t[i]=sb[i];
	for(j=0;j<b[i];j++)
		c[i][j]=sb[i]++;
	}
printf("Filename\tStart block\tlength\n");
for(i=0;i<n;i++)
	printf("%d\t  %d \t%d\n",i+1,t[i],b[i]);
printf("Enter file name:");
scanf("%d",&x);
printf("File name is:%d",x);
printf("length is:%d",b[x-1]);
printf("blocks occupied:");
for(i=0;i<b[x-1];i++)
	printf("%4d",c[x-1][i]);
}

 Output:
 

(b) INDEXED :
#include<stdio.h>
void main()
{
 int n,m[20],i,j,sb[20],s[20],b[20][20],x;
printf("Enter no. of files:");
scanf("%d",&n);
for(i=0;i<n;i++)
 {	printf("Enter starting block and size of file%d:",i+1);
	scanf("%d%d",&sb[i],&s[i]);
	printf("Enter blocks occupied by file%d:",i+1);
	scanf("%d",&m[i]);
	printf("enter blocks of file%d:",i+1);
	for(j=0;j<m[i];j++)
		scanf("%d",&b[i][j]);
 } printf("\nFile\t index\tlength\n");
for(i=0;i<n;i++)
 {
	printf("%d\t%d\t%d\n",i+1,sb[i],m[i]);
}printf("\nEnter file name:");
scanf("%d",&x);
printf("file name is:%d\n",x);
 i=x-1;
printf("Index is:%d",sb[i]);
printf("Block occupied are:");
for(j=0;j<m[i];j++)
	printf("%3d",b[i][j]);
}
Output:
 
c)LINKED: 
#include<stdio.h>
struct file
{
char fname[10];
int start,size,block[10];
}f[10];
main()
{
int i,j,n;
printf("Enter no. of files:");
scanf("%d",&n);
for(i=0;i<n;i++)
 {
printf("Enter file name:");
scanf("%s",&f[i].fname);
printf("Enter starting block:");
scanf("%d",&f[i].start);
f[i].block[0]=f[i].start;
printf("Enter no.of blocks:");
scanf("%d",&f[i].size);
printf("Enter block numbers:");
for(j=1;j<=f[i].size;j++)
 {
	scanf("%d",&f[i].block[j]);
 }
 }
printf("File\tstart\tsize\tblock\n");
for(i=0;i<n;i++)
 {
	printf("%s\t%d\t%d\t",f[i].fname,f[i].start,f[i].size);
	for(j=1;j<=f[i].size-1;j++)
		printf("%d--->",f[i].block[j]);
	printf("%d",f[i].block[j]);
	printf("\n");
 }
}
OUTPUT:
 

 
Week – 10
Write a C program that illustrates two processes communicating using shared memory

Program:
#include<stdio.h>  
#include<stdlib.h>  
#include<unistd.h>  
#include<sys/shm.h>  
#include<string.h>  
int main()  
{  
int i;  
void *shared_memory;  
char buff[100];  
int shmid;  
shmid=shmget((key_t)2345, 1024, 0666|IPC_CREAT);   
printf("Key of shared memory is %d\n",shmid);  
shared_memory=shmat(shmid,NULL,0);   
printf("Process attached at %p\n",shared_memory);   
printf("Enter some data to write to shared memory\n");  
read(0,buff,100);  
strcpy(shared_memory,buff);  
printf("You wrote : %s\n",(char *)shared_memory);  
}  
Output:
 
 
Week – 11
Write C program to create a thread using pthreads library and let it run its function.

#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>

void *mythread(void *vargp)
{
  sleep(1);
  printf("welcome to AEC IT •\n");
  return NULL;
}
int main()
{
  pthread_t tid;
  printf("before thread\n");
  pthread_create(&tid,NULL,mythread,NULL);
  pthread_join(tid,NULL);
  exit(0);
}

Output:
 
 
Week – 12
Write a C program to illustrate concurrent execution of threads using pthreads library
Program:
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>

void *mythread1(void *vargp)
{
   int i;
   printf("thread1\n");
      for(i=1;i<=10;i++)
     printf("i=%d\n",i);    
   printf("exit from thread1\n");
  return NULL;
}

void *mythread2(void *vargp)
{
    int j;
   printf("thread2 \n");
   for(j=1;j<=10;j++)
    printf("j=%d\n",j);
   
 printf("Exit from thread2\n");
  return NULL;
}


int main()
{
  pthread_t tid;
  printf("before thread\n");
  pthread_create(&tid,NULL,mythread1,NULL);
  pthread_create(&tid,NULL,mythread2,NULL);
  pthread_join(tid,NULL);
  pthread_join(tid,NULL);
  exit(0);
}

Output:
 

